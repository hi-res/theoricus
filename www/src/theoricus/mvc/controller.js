// Generated by CoffeeScript 1.6.3
/**
  MVC module
  @module mvc
*/


(function() {
  var Controller, Fetcher, Model, View,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Model = require('theoricus/mvc/model');

  View = require('theoricus/mvc/view');

  Fetcher = require('theoricus/mvc/lib/fetcher');

  /**
    The controller is responsible for rendering the view.
  
    It receives the URL params, to be used for Model instantiation.
  
    The controller actions are mapped with the URL states (routes) in the app `routes` file.
  
    @class Controller
  */


  module.exports = Controller = (function() {
    function Controller() {
      this.dont_render = __bind(this.dont_render, this);
      this._render = __bind(this._render, this);
    }

    /*
    @param [theoricus.Theoricus] @the   Shortcut for app's instance
    */


    /**
      This function is executed by the Factory. It saves a `@the` reference inside the controller.
    
      @method _boot
      @param @the {Theoricus} Shortcut for app's instance
    */


    Controller.prototype._boot = function(the) {
      this.the = the;
      return this;
    };

    /**
      Build a default action ( renders the view passing all model records as data) in case the controller doesn't have an action implemented for the current `process` call.
    
      @method _build_action
      @param process {Process} Current {{#crossLink "Process"}}{{/crossLink}} being executed.
    */


    Controller.prototype._build_action = function(process) {
      var _this = this;
      return function(params, fn) {
        var action_name, controller_name, model_name;
        controller_name = process.route.controller_name;
        action_name = process.route.action_name;
        model_name = controller_name.singularize();
        return _this.the.factory.model(model_name, null, function(model) {
          var view_folder, view_name;
          if (model == null) {
            return;
          }
          view_folder = controller_name;
          view_name = action_name;
          if (model.all != null) {
            return _this.render("" + view_folder + "/" + view_name, model.all());
          } else {
            return _this.render("" + view_folder + "/" + view_name);
          }
        });
      };
    };

    /*
    Renders to some view
    
    @param [String] path  Path to view on the app tree
    @param [String] data  data to be rendered on the template
    */


    /**
      Responsible for rendering the View.
    
      Usually, this method is executed in the controller action mapped with the `route`.
      
      @method render
      @param path {String} View's file path. 
      @param data {Object} Data to be passed to the view. 
    
      @example
          index:(id)-> # Controller action
              render "app/views/index", Model.first()
    */


    Controller.prototype.render = function(path, data) {
      var url,
        _this = this;
      console.error("c: " + this.classname + " render " + this.process.url);
      url = this.process.url;
      return this.the.factory.view(path, function(view) {
        if (view == null) {
          return;
        }
        _this.process.view = view;
        console.error("c: " + _this.classname + " created view " + _this.process.url);
        console.log(_this.process);
        view.process = _this.process;
        if (data instanceof Fetcher) {
          if (data.loaded) {
            _this.process.data = data.records;
            return _this.process.trigger('render', url);
          } else {
            return data.onload = function(records) {
              return _this.process.trigger('render', url);
            };
          }
        } else {
          _this.data = data;
          return _this.process.trigger('render', url);
        }
      });
    };

    Controller.prototype._render = function(after_render) {
      console.error("c: " + this.classname + " _render " + this.process.url);
      console.log(this.process);
      this.process.view.after_in = after_render;
      this.process.view._render(this.data);
      return this.data = null;
    };

    /**
      This method substitutes the need of calling @render and returning
      a view.
    
      Process will simply ignores the rendering times, and will the frameworks
      callbacks will be called instantly
    */


    Controller.prototype.dont_render = function() {
      this.process.wont_render = true;
      return this.after_render();
    };

    /**
      Shortcut for application navigate.
    
      Navigate to the given URL.
    
      @method navigate
      @param url {String} URL to navigate to.
    */


    Controller.prototype.navigate = function(url) {
      var _ref;
      if ((_ref = this.process) != null ? _ref.is_in_the_middle_of_running_an_action : void 0) {
        this.process.processes.active_processes.pop();
        this.process.processes.pending_processes = [];
        this.after_render();
      }
      return this.the.processes.router.navigate(url);
    };

    return Controller;

  })();

}).call(this);
